/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import eDFDFlowTracking.Asset;
import eDFDFlowTracking.Assumption;
import eDFDFlowTracking.AttackerProfile;
import eDFDFlowTracking.DataStore;
import eDFDFlowTracking.EDFD;
import eDFDFlowTracking.EDFDFlowTracking1Package;
import eDFDFlowTracking.ExternalEntity;
import eDFDFlowTracking.Flow;
import eDFDFlowTracking.Responsibility;
import eDFDFlowTracking.TrustZone;
import eDFDFlowTracking.Value;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EDFDFlowTracking1Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EDFDFlowTracking1Package.ASSET:
				sequence_Asset(context, (Asset) semanticObject); 
				return; 
			case EDFDFlowTracking1Package.ASSUMPTION:
				sequence_Assumption(context, (Assumption) semanticObject); 
				return; 
			case EDFDFlowTracking1Package.ATTACKER_PROFILE:
				sequence_AttackerProfile(context, (AttackerProfile) semanticObject); 
				return; 
			case EDFDFlowTracking1Package.DATA_STORE:
				sequence_DataStore(context, (DataStore) semanticObject); 
				return; 
			case EDFDFlowTracking1Package.EDFD:
				sequence_EDFD(context, (EDFD) semanticObject); 
				return; 
			case EDFDFlowTracking1Package.EXTERNAL_ENTITY:
				sequence_ExternalEntity(context, (ExternalEntity) semanticObject); 
				return; 
			case EDFDFlowTracking1Package.FLOW:
				sequence_Flow(context, (Flow) semanticObject); 
				return; 
			case EDFDFlowTracking1Package.PROCESS:
				sequence_Process(context, (eDFDFlowTracking.Process) semanticObject); 
				return; 
			case EDFDFlowTracking1Package.RESPONSIBILITY:
				sequence_Responsibility(context, (Responsibility) semanticObject); 
				return; 
			case EDFDFlowTracking1Package.TRUST_ZONE:
				sequence_TrustZone(context, (TrustZone) semanticObject); 
				return; 
			case EDFDFlowTracking1Package.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Asset returns Asset
	 *
	 * Constraint:
	 *     (name=EString (value+=Value value+=Value*)? source=[Element|EString] targets+=[Element|EString] targets+=[Element|EString]*)
	 */
	protected void sequence_Asset(ISerializationContext context, Asset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Assumption returns Assumption
	 *
	 * Constraint:
	 *     ((Objective+=Objective Objective+=Objective*)? Layer=Layer?)
	 */
	protected void sequence_Assumption(ISerializationContext context, Assumption semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttackerProfile returns AttackerProfile
	 *
	 * Constraint:
	 *     (name=EString Observation=EInt?)
	 */
	protected void sequence_AttackerProfile(ISerializationContext context, AttackerProfile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataStore returns DataStore
	 *     Element returns DataStore
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (assets+=[Asset|EString] assets+=[Asset|EString]*)? 
	 *         (assumption+=Assumption assumption+=Assumption*)? 
	 *         (inflows+=[Flow|EString] inflows+=[Flow|EString]*)? 
	 *         (outflows+=Flow outflows+=Flow*)? 
	 *         Attacker=EBoolean?
	 *     )
	 */
	protected void sequence_DataStore(ISerializationContext context, DataStore semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EDFD returns EDFD
	 *
	 * Constraint:
	 *     (name=EString (asset+=Asset asset+=Asset*)? (elements+=Element elements+=Element*)? (trustzones+=TrustZone trustzones+=TrustZone*)?)
	 */
	protected void sequence_EDFD(ISerializationContext context, EDFD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalEntity returns ExternalEntity
	 *     Element returns ExternalEntity
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (assets+=[Asset|EString] assets+=[Asset|EString]*)? 
	 *         (assumption+=Assumption assumption+=Assumption*)? 
	 *         (inflows+=[Flow|EString] inflows+=[Flow|EString]*)? 
	 *         (outflows+=Flow outflows+=Flow*)? 
	 *         Attacker=EBoolean?
	 *     )
	 */
	protected void sequence_ExternalEntity(ISerializationContext context, ExternalEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flow returns Flow
	 *     Element returns Flow
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         number=EInt? 
	 *         (assets+=[Asset|EString] assets+=[Asset|EString]*)? 
	 *         source=[Element|EString]? 
	 *         (target+=[Element|EString] target+=[Element|EString]*)? 
	 *         Channel=Channel? 
	 *         (assumption+=Assumption assumption+=Assumption*)?
	 *     )
	 */
	protected void sequence_Flow(ISerializationContext context, Flow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Process returns Process
	 *     Element returns Process
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (responsibility+=Responsibility responsibility+=Responsibility*)? 
	 *         (assets+=[Asset|EString] assets+=[Asset|EString]*)? 
	 *         (assumption+=Assumption assumption+=Assumption*)? 
	 *         (inflows+=[Flow|EString] inflows+=[Flow|EString]*)? 
	 *         (outflows+=Flow outflows+=Flow*)? 
	 *         Attacker=EBoolean?
	 *     )
	 */
	protected void sequence_Process(ISerializationContext context, eDFDFlowTracking.Process semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Responsibility returns Responsibility
	 *
	 * Constraint:
	 *     (
	 *         incomeassets+=[Asset|EString]? 
	 *         incomeassets+=[Asset|EString]* 
	 *         Action+=ResponsibilityType 
	 *         outcomeassets+=[Asset|EString]? 
	 *         outcomeassets+=[Asset|EString]*
	 *     )?
	 */
	protected void sequence_Responsibility(ISerializationContext context, Responsibility semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrustZone returns TrustZone
	 *     Element returns TrustZone
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (attackerprofile+=AttackerProfile attackerprofile+=AttackerProfile*)? 
	 *         (elements+=[Element|EString] elements+=[Element|EString]*)? 
	 *         (subzones+=TrustZone subzones+=TrustZone*)?
	 *     )
	 */
	protected void sequence_TrustZone(ISerializationContext context, TrustZone semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     (Priority=Priority? Objective=Objective?)
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
