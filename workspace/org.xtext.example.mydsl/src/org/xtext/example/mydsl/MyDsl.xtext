// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/eDFDFlowTracking" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

EDFD returns EDFD:
	{EDFD}
	'EDFD'
	name=EString
	'['
		('assets:' asset+=Asset ( "," asset+=Asset)* )?
		('elements:' elements+=Element ( "," elements+=Element)* )?
		('attack' 'zones:' trustzones+=TrustZone ( "," trustzones+=TrustZone)* )?
	']';

TrustZone:
	{TrustZone}
	name=EString
	'['
		//a flow is contained by the boundary if it is an outgoing (or incoming) flow from an element inside the boundary
		('attacker' 'profiles:' attackerprofile+=AttackerProfile ( "," attackerprofile+=AttackerProfile)* )?
		('elements:' elements+=[Element|EString] ( "," elements+=[Element|EString])*  )?
		('subzones:' subzones+=TrustZone ( "," subzones+=TrustZone)* )?
	']'
;

AttackerProfile returns AttackerProfile:
	{AttackerProfile}
	name=EString
	'['
		('observation:' Observation=EInt)?
	']';

Asset returns Asset:
	{Asset}
	'Asset'
	name=EString
		('values:' value+=Value ( "," value+=Value)* )?
		'source:' source=[Element|EString]
		'targets:' targets+=[Element|EString] ( "," targets+=[Element|EString])*
		
	;

Process returns Process:
	{Process}
	'Process'
	name=EString
	'['
		('responsibilities:' responsibility+=Responsibility ( "," responsibility+=Responsibility)* )?
		('assets:' assets+=[Asset|EString] ( "," assets+=[Asset|EString])* )?
		('assumption:' assumption+=Assumption ( "," assumption+=Assumption)*)?
		('incoming' 'flows:' inflows+=[Flow|EString] ( "," inflows+=[Flow|EString])*)?
		('outgoing' 'flows:' outflows+=Flow ( "," outflows+=Flow)*)?
		('attacker:' Attacker=EBoolean)?
	']';

Responsibility:
	{Responsibility}
	'['
		((incomeassets+=[Asset|EString])? ( "," incomeassets+=[Asset|EString])* Action+=ResponsibilityType '::' (outcomeassets+=[Asset|EString])? ( "," outcomeassets+=[Asset|EString])* )?
	']'
;

ExternalEntity returns ExternalEntity:
	{ExternalEntity}
	'ExternalEntity'
	name=EString
	'['
		('assets:' assets+=[Asset|EString] ( "," assets+=[Asset|EString])* )?
		('assumption:' assumption+=Assumption ( "," assumption+=Assumption)*)?
		('incoming' 'flows:' inflows+=[Flow|EString] ( "," inflows+=[Flow|EString])*)?
		('outgoing' 'flows:' outflows+=Flow ( "," outflows+=Flow)*)?
		('attacker:' Attacker=EBoolean)?
	']';

Flow returns Flow:
	{Flow}
	name=EString
	'['
		('num:' number=EInt)?
		('assets:' assets+=[Asset|EString] ( "," assets+=[Asset|EString])* )?
		('source:' source=[Element|EString])?
		('targets:' target+=[Element|EString] ( "," target+=[Element|EString])*  )?
		('channel' Channel=Channel)?
		('assumption:' assumption+=Assumption ( "," assumption+=Assumption)*)?
	']';

DataStore returns DataStore:
	{DataStore}
	'DataStore'
	name=EString
	'['
		('assets:' assets+=[Asset|EString] ( "," assets+=[Asset|EString])* )?
		('assumption:' assumption+=Assumption ( "," assumption+=Assumption)*)?
		('incoming' 'flows:' inflows+=[Flow|EString] ( "," inflows+=[Flow|EString])*)?
		('outgoing' 'flows:' outflows+=Flow ( "," outflows+=Flow)*)?
		('attacker:' Attacker=EBoolean)?
	']';

Value returns Value:
	{Value}
	'['
		(Priority=Priority)?
		(Objective=Objective)?
	']';

Assumption returns Assumption:
	{Assumption}
	'['
		(Objective+=Objective ( "," Objective+=Objective)* )?
		('layer:' Layer=Layer)?
	']';
	
Element returns Element:
	Process | ExternalEntity | Flow | DataStore | TrustZone;

EString returns ecore::EString:
	STRING | ID;
	
EBoolean returns ecore::EBoolean:
 'true' | 'false';
			
EInt returns ecore::EInt:
	'-'? INT;

enum Priority returns Priority:
				H = 'H' | M = 'M' | L = 'L';
				
enum Objective returns Objective:
				Integrity = 'I' | Confidentiality = 'C' | Availability = 'Av' | Accountability = 'Ac';

enum Layer returns Layer:
				Transport = 'Transport' | Architectural = 'Architectural' | Application = 'Application';

enum ResponsibilityType returns ResponsibilityType:
				Store = 'Store' | Comparator = 'Comparator' | Discarder = 'Discarder' | Joiner = 'Joiner' | Copier = 'Copier' | Splitter = 'Splitter' | Forward = 'Forward' | EncryptOrHash = 'EncryptOrHash' | Decrypt = 'Decrypt' | Authenticator = 'Authenticator' | Authoriser = 'Authoriser' | Verifier = 'Verifier' | User = 'User';

enum Channel returns Channel:
				VLAN = 'VLAN' | ETH = 'ETH' | WiFi = 'WiFi';
